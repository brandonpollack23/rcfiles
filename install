#!/bin/bash
set -e

if $(uname -a | grep -q WSL); then
    echo "WSL system detected"
    IS_WSL="true"
fi

if [[ -z $HOME ]];then
    echo "must have a home directory!"
fi

echo "$(whoami)"

RCFILESDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

# First do this user tasks
if [ "$UID" -ne 0 ]; then
    # Add cronjobs I like
    # legacy cron style, uncomment for cron instead
    #CURRENT_CRONTAB=$(crontab -u $CALLING_USER -l) || $(echo "")
    #NEW_TABLE_ENTRIES=$(/bin/cat $RCFILESDIR/append_user_crontable)
    #echo "$CURRENT_CRONTAB"; echo "$NEW_TABLE_ENTRIES" | crontab -u $CALLING_USER -
    if [[ -z $IS_WSL ]]; then
        echo "Setting up systemd timers"
        mkdir -p $HOME/.config/systemd/user
        for systemd_file in $RCFILESDIR/systemd/* ; do
            echo "Setting up $systemd_file"
            sed 's/!~USER~!/'"$CALLING_USER"'/g' $systemd_file > "$HOME/.config/systemd/user/$(basename $systemd_file)"
            # Run systemctl --user enable as the user
            systemctl --user daemon-reload
            CMD="systemctl --user enable --now $(basename $systemd_file)"
            echo $CMD
            $CMD
        done
    fi
fi

[ "$UID" -eq 0 ] || exec sudo HOME=$HOME "$0" -u ${USER}

getopts ":u:" u
case $u in
    u)
        CALLING_USER=$OPTARG
        ;;
    *)
        echo "dont run as root, just run and let me do it"
        exit 1
esac

echo "Installing to home directory: $HOME"

declare -A osInfo;
apt="apt-get install -my"
osInfo[/etc/debian_version]=$apt
apk="apk --update add"
osInfo[/etc/alpine-release]=$apk
yum="yum install -y"
osInfo[/etc/centos-release]=$yum
dnf="dnf install -y"
osInfo[/etc/fedora-release]=$dnf

for f in ${!osInfo[@]}
do
    if [[ -f $f ]];then
        package_manager=${osInfo[$f]}
    fi
done

if [[ -f "/etc/debian_version" ]]; then
    # Enable non free sources in Debian based os's that use it's packages.
    echo "~~~~~~~~~~~~~~~~~~~~~~~~~~Debian System Detected!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
    set +e
    CONFIGURED_SOURCES=$(grep -E -e "\<contrib\>" -e "\<non-free\>" /etc/apt/sources.list)
    set -e
    if [[ -z $CONFIGURED_SOURCES ]]; then
        echo "Configuring sources to include contrib and nonfree"
        sed -i 's/debian\.org.*$/& contrib non-free/g' /etc/apt/sources.list
    fi
    if [[ ! -f /etc/apt/sources.list.d/buster-backports.list ]] && [[ "$(cat /etc/apt/sources.list | grep buster)" != "" ]]; then
        echo "~~~Installing buster backports~~~"
        echo 'deb http://deb.debian.org/debian buster-backports main contrib non-free' > /etc/apt/sources.list.d/buster-backports.list
    fi
    apt update

    platform_packages="fortunes-debian-hints debian-handbook texinfo-doc-nonfree devscripts etherwake wakeonlan apt-file net-tools"
    # future yum stuff: net-tools

    # Enable apache cgi (for man2html)
    # a2enmod is a debian-ism, it'll have to be done manually on other distros.
    # TODO do it on other distros
    if [ ! -d /google ]; then
        # work laptop is debian but not really up to date so there are some exceptions.
        platform_commands="a2enmod cgid"
    fi

    export LOGIN_FORTUNES="debian-hints"
fi

optional_stupid_packages="figlet lolcat"
packages="runuser git tmux wordnet zsh emacs fd-find ripgrep cmigemo core-utils pandoc shellcheck vim curl tree nodejs npm imagemagick chroma fzf man2html \
ruby info2www cowsay fortune-mod info pinfo apache2 nfs-common $platform_packages $optional_stupid_packages"

echo "Installing packages: $packages"

${package_manager} ${packages} || true

gem install mdless || true

# Run any platform specific commands that
$platform_commands

# Install Emacs DOOM
if [ -d $HOME/.emacs.d ]; then
    echo "Emacs.d already exists, skipping DOOM setup"
else
    echo "No Emacs configuration, Ripping and Tearing your config...(Installing Doom Emacs)"
    runuser -u $CALLING_USER -- git clone https://github.com/hlissner/doom-emacs $HOME/.emacs.d
    yes | runuser -u $CALLING_USER -- $HOME/.emacs.d/bin/doom install
fi
echo "Linking DOOMDIR"
rm -rf $HOME/.doom.d
runuser -u $CALLING_USER -- ln -sfn $RCFILESDIR/.doom.d $HOME/.doom.d

mkdir -p $HOME/.vim/backupdir
chown $CALLING_USER $HOME/.vim/backupdir
mkdir -p $HOME/.vim/swapdir
chown $CALLING_USER $HOME/.vim/swapdir

# Make directories
mkdir -p $HOME/.vim/swapdir
chown $CALLING_USER $HOME/.vim/swapdir
mkdir -p $HOME/.vim/backupdir
chown $CALLING_USER $HOME/.vim/backupdir
mkdir -p $HOME/.config
chown $CALLING_USER $HOME/.config

# Make symbolic links into this dir
# TODO move this to non priveleged part top of file
ln -sfn $RCFILESDIR/.zshrc $HOME/.zshrc
chown $CALLING_USER $HOME/.zshrc
ln -sfn $RCFILESDIR/zsh-plugins $HOME/zsh-plugins
chown $CALLING_USER $HOME/zsh-plugins
ln -sfn $RCFILESDIR/.oh-my-zsh $HOME/.oh-my-zsh
chown $CALLING_USER $HOME/.oh-my-zsh
ln -sfn $RCFILESDIR/.vimrc $HOME/.vimrc
chown $CALLING_USER $HOME/.vimrc
ln -sfn $RCFILESDIR/.tmux.conf $HOME/.tmux.conf
chown $CALLING_USER $HOME/.tmux.conf
ln -sfn $RCFILESDIR/.gitconfig $HOME/.gitconfig
chown $CALLING_USER $HOME/.gitconfig
ln -sfn $RCFILESDIR/.vim/pack $HOME/.vim/pack
chown $CALLING_USER $HOME/.vim/pack
ln -sfn $RCFILESDIR/.vim/colors $HOME/.vim/colors
chown $CALLING_USER $HOME/.vim/colors
ln -sfn $RCFILESDIR/.config/coc $HOME/.config/coc
chown $CALLING_USER $HOME/.config/coc
ln -sfn $RCFILESDIR/.cowrc $HOME/.cowrc
chown $CALLING_USER $HOME/.cowrc
ln -sfn $RCFILESDIR/.cowfiles $HOME/.cowfiles
chown $CALLING_USER $HOME/.cowfiles

# Load rebuild documents in vim
vim +"helptags ALL" +":exit"
vim +"call mkdp#util#install()" +":exit"

# Change to zsh
chsh -s `which zsh` $CALLING_USER

echo "Setup complete, please logout and log back in to access the new shell enviornment"
echo "Consider running ./update_root_prefs as well if you are the system administrator"
